#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
-------------------------------------------------

    @   Author  :       Max_Pengjb
    @   date    :       2018/9/22 22:07
    @   IDE     :       PyCharm
    @   Site    :       
-------------------------------------------------
    Description :       
-------------------------------------------------
"""

__author__ = 'Max_Pengjb'

"""
Python中有两个非常常见的内置函数：map()和reduce()函数。
这两个函数都是应用于序列的处理函数，map()用于映射，reduce()用于归并。

本关目标就是让读者了解并掌握map()和reduce()函数的相关知识。
相关知识
map()函数

map()函数会根据传入的函数对指定的序列做映射。
map()函数接收两个参数，一个是function函数，另一个参数是一个或多个序列。
map()函数会将传入的函数依次作用到传入序列的每个元素，并把结果作为新的序列返回。

map()函数的定义为：

map(function, sequence[, sequence, ...]) -> list

例如，我们要对一个列表序列中的每个数值元素进行平方运算，结合上一关提到的lambda函数的例子，
程序代码如下：
"""

r = map(lambda x: x ** 2, [1, 2, 3, 4])
print(list(r))
"""
输出结果：
[1, 4, 9, 16]


---------------------
当map()函数的第二个参数中存在多个序列时，会依次将每个序列中相同位置的元素一起做参数调用function函数。
例如：要对map()函数传入的两个序列中的元素依次求和，
程序代码如下：
"""

r = map(lambda x, y: x + y, [1, 2, 3, 4, 5], [6, 7, 8, 9, 10])
print(list(r))
print(list(map(lambda x, y: x + y, [1, 3, 5], [2, 4, 6])))
print(list(map(lambda x, y: (x + y, x - y), [1, 3, 5], [2, 4, 6])))
print(list(zip([1, 3, 5], [2, 4, 6])))
"""
输出结果：
[7, 9, 11, 13, 15]
[3, 7, 11] 
[(3, -1), (7, -1), (11, -1)] 
[(1, 2), (3, 4), (5, 6)]
当map()函数传入的序列有多个时，我们注意function函数的参数数量，要和map()函数传入的序列数量相匹配。


---------------------
reduce()函数
reduce()函数把传入的函数作用在一个序列[x1, x2, x3, ...]上，这个函数必须要接收两个参数，
reduce()函数把第一次计算的结果继续和序列中的下一个元素做累积计算。reduce()函数的定义为：
reduce(function, sequence[, initial]) -> value
function参数是有两个参数的函数，reduce()函数依次序列中取元素，和上一次调用function函数的结果做参数再次调用function函数。
initializer -- 可选，初始参数
例如：
"""
# 在 Python3 中，reduce() 函数已经被从全局名字空间里移除了，它现在被放置在 fucntools 模块里，
# 如果想要使用它，则需要通过引入 functools 模块来调用 reduce() 函数：
from functools import reduce

r = reduce(lambda x, y: x + y, [1, 2, 3, 4, 5])
print(r)

"""
输出结果：

21

在上述例子中，程序的计算顺序为((((((1+6)+2)+3)+4)+5))
小结：map()和reduce()函数的应用十分广泛，在分布式计算领域有着十分重要的运用，
期待着读者在今后的开发道路上对map()和reduce()函数有更加深刻的体验。
"""
